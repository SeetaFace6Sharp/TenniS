# Build TenniS

stages:
  - build
  - test
  
variables:
  GIT_SUBMODULE_STRATEGY: recursive
  THREADS: '4'
  
  
.only_config:
  only: &only_config
    # - ci
    - nothing
    
.ubuntu_before_script:
  before_script: &ubuntu_before_script
    - export DEBIAN_FRONTEND=noninteractive
    - export TZ=Asia/Shanghai
    - sed -i s@/archive.ubuntu.com/@/mirrors.aliyun.com/@g /etc/apt/sources.list
    - (apt update || echo "[WARNNING] Some thing wrong, but ignored!")
    - apt-get install -y git cmake gcc g++

    
.linux_build_config:
  script: &linux_build_script_config
    - export ARTIFACTS=`pwd`/$CI_PROJECT_NAME-$CI_JOB_NAME
    - if [ ! -d "$ARTIFACTS" ]; then mkdir "$ARTIFACTS"; fi
    - 'echo [Version] > $ARTIFACTS/version.txt'
    - 'echo date: `date` >> $ARTIFACTS/version.txt'
    - 'echo ref: $CI_COMMIT_REF_NAME >> $ARTIFACTS/version.txt'
    - 'echo tag: $CI_COMMIT_TAG >> $ARTIFACTS/version.txt'
    - 'echo reversion: $CI_COMMIT_SHA >> $ARTIFACTS/version.txt'
    - 'echo [Recent Log]  >> $ARTIFACTS/version.txt'
    - git log -n 32 --pretty=format:"%h [%ad] %s" | grep -v Merge | head -n 16 >> $ARTIFACTS/version.txt
    - cat $ARTIFACTS/version.txt
    - cmake --version
    - mkdir build
    - cd build
    - cmake .. -DTS_DYNAMIC_INSTRUCTION=ON -DCMAKE_INSTALL_PREFIX=$ARTIFACTS
    # - export THREADS=`cat /proc/cpuinfo | grep processor| wc -l`
    - make -j$THREADS install

  artifacts: &linux_artifacts_config
    name: '$CI_PROJECT_NAME-$CI_JOB_NAME'
    paths:
      - '$CI_PROJECT_NAME-$CI_JOB_NAME/'
    expire_in: 1 week
    
.linux_test_config:
  script: &linux_test_script_config
    - export ARTIFACTS=`pwd`/$CI_PROJECT_NAME-${CI_JOB_NAME%_*}
    - echo $ARTIFACTS
    - ls -l
    - cd $ARTIFACTS
    - ls -l

    
.linux_build_cuda_config:
  script: &linux_build_cuda_script_config
    - export ARTIFACTS=`pwd`/$CI_PROJECT_NAME-$CI_JOB_NAME
    - if [ ! -d "$ARTIFACTS" ]; then mkdir "$ARTIFACTS"; fi
    - 'echo [Version] > $ARTIFACTS/version.txt'
    - 'echo date: `date` >> $ARTIFACTS/version.txt'
    - 'echo ref: $CI_COMMIT_REF_NAME >> $ARTIFACTS/version.txt'
    - 'echo tag: $CI_COMMIT_TAG >> $ARTIFACTS/version.txt'
    - 'echo reversion: $CI_COMMIT_SHA >> $ARTIFACTS/version.txt'
    - 'echo [Recent Log]  >> $ARTIFACTS/version.txt'
    - git log -n 32 --pretty=format:"%h [%ad] %s" | grep -v Merge | head -n 16 >> $ARTIFACTS/version.txt
    - cat $ARTIFACTS/version.txt
    - cmake --version
    - mkdir build
    - cd build
    - cmake .. -DTS_DYNAMIC_INSTRUCTION=ON -DTS_USE_CUDA=ON -DTS_USE_CUBLAS=ON -DCMAKE_INSTALL_PREFIX=$ARTIFACTS
    # - export THREADS=`cat /proc/cpuinfo | grep processor| wc -l`
    - make -j$THREADS tennis_LIB
    - make -j$THREADS tennis_haswell_LIB
    - make -j$THREADS tennis_sandy_bridge_LIB
    - make -j$THREADS tennis_pentium_LIB
    - make install
    

.mingw_before_script:
  before_script: &mingw_before_script
    - export DEBIAN_FRONTEND=noninteractive
    - export TZ=Asia/Shanghai
    # Using default ubuntu repo. Aliyun is unstable to download mingw-w64
    # - sed -i s@/archive.ubuntu.com/@/mirrors.aliyun.com/@g /etc/apt/sources.list
    # Try tuna repo.
    - (apt update || echo "[WARNNING] Some thing wrong, but ignored!")
    - apt-get install -y git cmake mingw-w64

    
.mingw-x86_64_build_config:
  script: &mingw-x86_64_build_script_config
    - export ARTIFACTS=`pwd`/$CI_PROJECT_NAME-$CI_JOB_NAME
    - if [ ! -d "$ARTIFACTS" ]; then mkdir "$ARTIFACTS"; fi
    - 'echo [Version] > $ARTIFACTS/version.txt'
    - 'echo date: `date` >> $ARTIFACTS/version.txt'
    - 'echo ref: $CI_COMMIT_REF_NAME >> $ARTIFACTS/version.txt'
    - 'echo tag: $CI_COMMIT_TAG >> $ARTIFACTS/version.txt'
    - 'echo reversion: $CI_COMMIT_SHA >> $ARTIFACTS/version.txt'
    - 'echo [Recent Log]  >> $ARTIFACTS/version.txt'
    - git log -n 32 --pretty=format:"%h [%ad] %s" | grep -v Merge | head -n 16 >> $ARTIFACTS/version.txt
    - cat $ARTIFACTS/version.txt
    # Config
    - export ARCH=x86_64  # or i686
    - export VERSION=9.3  # Notice that GCC is assumed version 9.3 in Ubuntu20.04.
    # Start compile
    - cmake --version
    - mkdir build
    - cd build
    - cmake .. -DCMAKE_TOOLCHAIN_FILE=../toolchain/MinGW-$ARCH.cmake -DTS_DYNAMIC_INSTRUCTION=ON -DCMAKE_INSTALL_PREFIX=$ARTIFACTS
    # - export THREADS=`cat /proc/cpuinfo | grep processor| wc -l`
    - make -j$THREADS install
    # Copy ref DLLs to artifacts.
    - if [ ! -d "$ARTIFACTS/bin" ]; then mkdir "$ARTIFACTS/bin"; fi
    - cp /usr/$ARCH-w64-mingw32/lib/libwinpthread-1.dll $ARTIFACTS/bin
    - cp /usr/lib/gcc/$ARCH-w64-mingw32/$VERSION-posix/libgcc_s_seh-1.dll $ARTIFACTS/bin
    - cp /usr/lib/gcc/$ARCH-w64-mingw32/$VERSION-posix/libgomp-1.dll $ARTIFACTS/bin
    - cp /usr/lib/gcc/$ARCH-w64-mingw32/$VERSION-posix/libstdc++-6.dll $ARTIFACTS/bin
    # Add tips to tell how to use packaged files.
    - 'echo [Notice] > $ARTIFACTS/notice.txt'
    - 'echo Please use the DLLs in this package to replace the same name DLLs in your own environment \
       or put them in the working directory to prevent symbols conflict. > $ARTIFACTS/notice.txt'

    
.mingw-i686_build_config:
  script: &mingw-i686_build_script_config
    - export ARTIFACTS=`pwd`/$CI_PROJECT_NAME-$CI_JOB_NAME
    - if [ ! -d "$ARTIFACTS" ]; then mkdir "$ARTIFACTS"; fi
    - 'echo [Version] > $ARTIFACTS/version.txt'
    - 'echo date: `date` >> $ARTIFACTS/version.txt'
    - 'echo ref: $CI_COMMIT_REF_NAME >> $ARTIFACTS/version.txt'
    - 'echo tag: $CI_COMMIT_TAG >> $ARTIFACTS/version.txt'
    - 'echo reversion: $CI_COMMIT_SHA >> $ARTIFACTS/version.txt'
    - 'echo [Recent Log]  >> $ARTIFACTS/version.txt'
    - git log -n 32 --pretty=format:"%h [%ad] %s" | grep -v Merge | head -n 16 >> $ARTIFACTS/version.txt
    - cat $ARTIFACTS/version.txt
    # Config
    - export ARCH=i686  # or x86_64
    - export VERSION=9.3  # Notice that GCC is assumed version 9.3 in Ubuntu20.04.
    # Start compile
    - cmake --version
    - mkdir build
    - cd build
    - cmake .. -DCMAKE_TOOLCHAIN_FILE=../toolchain/MinGW-$ARCH.cmake -DTS_DYNAMIC_INSTRUCTION=ON -DCMAKE_INSTALL_PREFIX=$ARTIFACTS
    # - export THREADS=`cat /proc/cpuinfo | grep processor| wc -l`
    - make -j$THREADS install
    # Copy ref DLLs to artifacts. Notice that GCC is assumed version 9.3 in Ubuntu20.04.
    - if [ ! -d "$ARTIFACTS/bin" ]; then mkdir "$ARTIFACTS/bin"; fi
    - cp /usr/$ARCH-w64-mingw32/lib/libwinpthread-1.dll $ARTIFACTS/bin
    - cp /usr/lib/gcc/$ARCH-w64-mingw32/$VERSION-posix/libgcc_s_sjlj-1.dll $ARTIFACTS/bin
    - cp /usr/lib/gcc/$ARCH-w64-mingw32/$VERSION-posix/libgomp-1.dll $ARTIFACTS/bin
    - cp /usr/lib/gcc/$ARCH-w64-mingw32/$VERSION-posix/libstdc++-6.dll $ARTIFACTS/bin
    # Add tips to tell how to use packaged files.
    - 'echo [Notice] > $ARTIFACTS/notice.txt'
    - 'echo Please use the DLLs in this package to replace the same name DLLs in your own environment \
       or put them in the working directory to prevent symbols conflict. > $ARTIFACTS/notice.txt'
    
  
.ubuntu1604_image: &ubuntu1604_config
  image: "ubuntu:16.04"
  before_script: *ubuntu_before_script
    
    
.ubuntu1804_image: &ubuntu1804_config
  image: "ubuntu:18.04"
  before_script: *ubuntu_before_script
  
  
.ubuntu2004_image: &ubuntu2004_config
  image: "ubuntu:20.04"
  before_script: *ubuntu_before_script


.ubuntu1604_cuda92_image: &ubuntu1604_cuda92_config
  image: "nvidia/cuda:9.2-devel-ubuntu16.04"
  before_script: *ubuntu_before_script


.ubuntu1604_cuda102_image: &ubuntu1604_cuda102_config
  image: "nvidia/cuda:10.2-devel-ubuntu16.04"
  before_script: *ubuntu_before_script


.ubuntu1604_cuda1131_image: &ubuntu1604_cuda1131_config
  image: "nvidia/cuda:11.3.1-devel-ubuntu16.04"
  before_script: *ubuntu_before_script


.ubuntu1804_cuda1141_image: &ubuntu1804_cuda1141_config
  image: "nvidia/cuda:11.4.1-devel-ubuntu18.04"
  before_script: *ubuntu_before_script


.ubuntu2004_cuda1141_image: &ubuntu2004_cuda1141_config
  image: "nvidia/cuda:11.4.1-devel-ubuntu20.04"
  before_script: *ubuntu_before_script
  
  
.mingw_image: &mingw_config
  image: "ubuntu:20.04"
  before_script: *mingw_before_script
  
  
ubuntu16.04-amd64:
  <<: *ubuntu1604_config
  stage: build
  tags:
    - docker,amd64,linux
  only: *only_config
  script: *linux_build_script_config
  artifacts: *linux_artifacts_config
  
  
ubuntu18.04-amd64:
  <<: *ubuntu1804_config
  stage: build
  tags:
    - docker,amd64,linux
  only: *only_config
  script: *linux_build_script_config
  artifacts: *linux_artifacts_config
  
  
ubuntu20.04-amd64:
  <<: *ubuntu2004_config
  stage: build
  tags:
    - docker,amd64,linux
  only: *only_config
  script: *linux_build_script_config
  artifacts: *linux_artifacts_config


ubuntu16.04_cuda9.2-amd64:
  <<: *ubuntu1604_cuda92_config
  stage: build
  tags:
    - docker,amd64,linux
  only: *only_config
  script: *linux_build_cuda_script_config
  artifacts: *linux_artifacts_config


ubuntu16.04_cuda10.2-amd64:
  <<: *ubuntu1604_cuda102_config
  stage: build
  tags:
    - docker,amd64,linux
  only: *only_config
  script: *linux_build_cuda_script_config
  artifacts: *linux_artifacts_config


ubuntu16.04_cuda11.3.1-amd64:
  <<: *ubuntu1604_cuda1131_config
  stage: build
  tags:
    - docker,amd64,linux
  only: *only_config
  script: *linux_build_cuda_script_config
  artifacts: *linux_artifacts_config


# Ubuntu18.04 default cmake had conflict with CUDA 10.x
# ubuntu18.04_cuda11.4.1-amd64:
#   <<: *ubuntu1804_cuda1141_config
#   stage: build
#   tags:
#     - docker,amd64,linux
#   only: *only_config
#   script: *linux_build_cuda_script_config
#   artifacts: *linux_artifacts_config


ubuntu20.04_cuda11.4.1-amd64:
  <<: *ubuntu2004_cuda1141_config
  stage: build
  tags:
    - docker,amd64,linux
  only: *only_config
  script: *linux_build_cuda_script_config
  artifacts: *linux_artifacts_config


mingw-x86_64:
  <<: *mingw_config
  stage: build
  tags:
    - docker,amd64,linux
  only: *only_config
  script: *mingw-x86_64_build_script_config
  artifacts: *linux_artifacts_config

  
mingw-i686:
  <<: *mingw_config
  stage: build
  tags:
    - docker,amd64,linux
  only: *only_config
  script: *mingw-i686_build_script_config
  artifacts: *linux_artifacts_config

  
# mingw-i686_test:
#   image: "ubuntu:20.04"
#   stage: test
#   tags:
#     - docker,amd64,linux
#   only: *only_config
#   script: *linux_test_script_config
#   dependencies:
#     - mingw-i686
  
  